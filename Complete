toCertainly, here's a complete React application with the functionality you described:

```jsx
import React, { useState } from 'react';

// Sample data for expense list
const expensesData = [
  { id: 1, status: 'Approved', description: 'Expense 1' },
  { id: 2, status: 'Pending', description: 'Expense 2' },
  { id: 3, status: 'Rejected', description: 'Expense 3' },
];

function ExpenseCard({ expense, onClick }) {
  return (
    <div
      onClick={() => onClick(expense)}
      style={{ fontWeight: expense.status === 'Pending' ? 'bold' : 'normal' }}
    >
      <h3>{expense.description}</h3>
      <p>Status: {expense.status}</p>
    </div>
  );
}

function ExpenseList({ expenses, onCardClick }) {
  return (
    <div>
      <h2>Expense List</h2>
      <ul>
        {expenses.map((expense) => (
          <li key={expense.id}>
            <ExpenseCard expense={expense} onClick={onCardClick} />
          </li>
        ))}
      </ul>
    </div>
  );
}

import React from 'react';

function Filter({ selectedStatus, onFilterChange }) {
  return (
    <div>
      <sdf-menu>
        <sdf-menu-item
          selected={selectedStatus === "All"}
          onClick={() => onFilterChange("All")}
        >
          All
        </sdf-menu-item>
        <sdf-menu-item
          selected={selectedStatus === "Approved"}
          onClick={() => onFilterChange("Approved")}
        >
          Approved
        </sdf-menu-item>
        <sdf-menu-item
          selected={selectedStatus === "Rejected"}
          onClick={() => onFilterChange("Rejected")}
        >
          Rejected
        </sdf-menu-item>
        <sdf-menu-item
          selected={selectedStatus === "Pending"}
          onClick={() => onFilterChange("Pending")}
        >
          Pending
        </sdf-menu-item>
      </sdf-menu>
    </div>
  );
}

export default Filter;


function Wizard({ expense, onStatusChange, onClose }) {
  return (
    <div>
      <h2>Expense Details</h2>
      <div>
        <p>Description: {expense.description}</p>
        <p>Status: {expense.status}</p>
      </div>
      <div>
        <button onClick={() => onStatusChange('Approved')}>Approve</button>
        <button onClick={() => onStatusChange('Rejected')}>Reject</button>
        <button onClick={onClose}>Close</button>
      </div>
    </div>
  );
}

function App() {
  const [selectedExpense, setSelectedExpense] = useState(null);
  const [filterStatus, setFilterStatus] = useState('All');
  const [expenses, setExpenses] = useState(expensesData);

  const handleCardClick = (expense) => {
    setSelectedExpense(expense);
  };

  const handleFilterChange = (newStatus) => {
    setFilterStatus(newStatus);
  };

  const handleStatusChange = (newStatus) => {
    if (selectedExpense) {
      selectedExpense.status = newStatus;
      setSelectedExpense({ ...selectedExpense });
    }
  };

  const handleCloseWizard = () => {
    setSelectedExpense(null);
  };

  const filteredExpenses = filterStatus === 'All'
    ? expenses
    : expenses.filter(expense => expense.status === filterStatus);

  return (
    <div>
      <Filter selectedStatus={filterStatus} onFilterChange={handleFilterChange} />
      <ExpenseList expenses={filteredExpenses} onCardClick={handleCardClick} />
      {selectedExpense && (
        <Wizard
          expense={selectedExpense}
          onStatusChange={handleStatusChange}
          onClose={handleCloseWizard}
        />
      )}
    </div>
  );
}

export default App;
```

This React application demonstrates the following functionality:

1. Filtering the expense list by status (All, Approved, Rejected, Pending).
2. Bold highlighting of "Pending" expense cards.
3. Clicking on an expense card opens the Wizard component to display details.
4. Changing the status in the Wizard component reflects the change and updates the list.
5. The Wizard component can be closed to return to the expense list.

You can copy and paste this code into your React application and adjust it to fit your project's structure and styling as needed.





import axios from 'axios';

// Create an Axios instance with a base URL
const axiosInstance = axios.create({
  baseURL: 'https://mockio/v1/02324cdf-2013-4b97-a252-ac7c1fc9382e',
});

// Make the GET request
axiosInstance
  .get('/')
  .then(response => {
    // Handle the successful response here
    console.log(response.data);
  })
  .catch(error => {
    // Handle any errors here
    console.error(error);
  });
