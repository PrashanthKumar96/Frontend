import React, { Component, createContext } from 'react';
import axios from 'axios'; // Import Axios for making HTTP requests
import { withRouter } from 'react-router-dom'; // Assuming you're using React Router for navigation

// Create the AuthContext
const AuthContext = createContext();

class AuthContextProvider extends Component {
    constructor(props) {
        super(props);
        this.state = {
            isAuthenticated: false,
            user: null,
            error: null
        };
    }

    // Modify the login function to use Axios
    login = async (userCredentials) => {
        try {
            // Replace 'YOUR_AUTH_ENDPOINT' with your actual authentication endpoint
            const response = await axios.post('YOUR_AUTH_ENDPOINT', userCredentials);

            // Check if the response contains a user object or is null
            if (response.data.user) {
                // Authentication successful
                this.setState({
                    isAuthenticated: true,
                    user: response.data.user,
                    error: null
                });

                // Redirect to a protected route
                this.props.history.push('/dashboard'); // Assuming you have a route named '/dashboard'
            } else {
                // Authentication failed
                this.setState({
                    isAuthenticated: false,
                    user: null,
                    error: 'Invalid username or password'
                });

                // Redirect to the login page
                this.props.history.push('/login');
            }
        } catch (error) {
            console.error(error);
            // Handle any authentication errors here
            this.setState({
                isAuthenticated: false,
                user: null,
                error: 'Authentication failed'
            });

            // Redirect to the login page
            this.props.history.push('/login');
        }
    }

    // Mock logout function for demonstration purposes
    logout = () => {
        // Perform logout actions here, e.g., clearing tokens, user data, etc.
        this.setState({
            isAuthenticated: false,
            user: null,
            error: null
        });

        // Redirect to the login page
        this.props.history.push('/login');
    }

    render() {
        const { isAuthenticated, user, error } = this.state;
        return (
            <AuthContext.Provider value={{ isAuthenticated, user, error, login: this.login, logout: this.logout }}>
                {this.props.children}
            </AuthContext.Provider>
        );
    }
}

// Wrap the AuthContextProvider with withRouter to access history for navigation
export default withRouter(AuthContextProvider);

export { AuthContext };
