Certainly! Below, you'll find code examples for a React frontend and a Spring Boot backend to demonstrate JWT authentication and session management with navigation between pages.

### Spring Boot Backend:

**1. Create a Spring Boot Application:**

```java
@SpringBootApplication
public class JwtAuthDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(JwtAuthDemoApplication.class, args);
    }
}
```

**2. User Model:**

```java
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String username;
    private String password;
    // Other user fields, roles, etc.
    // Getters and setters
}
```

**3. Authentication Controller:**

```java
@RestController
@RequestMapping("/api/auth")
public class AuthController {
    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @PostMapping("/login")
    public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtRequest authenticationRequest) throws Exception {
        // Authenticate the user
        final Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(authenticationRequest.getUsername(), authenticationRequest.getPassword())
        );

        // Generate JWT token
        final UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        final String token = jwtTokenUtil.generateToken(userDetails);

        return ResponseEntity.ok(new JwtResponse(token));
    }
}
```

**4. Security Configuration:**

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Autowired
    private JwtRequestFilter jwtRequestFilter;

    @Autowired
    private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;

    @Autowired
    private UserDetailsService userDetailsService;

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Override
    protected void configure(HttpSecurity httpSecurity) throws Exception {
        // Configure security settings here, including which endpoints are protected
        // Example: httpSecurity.authorizeRequests().antMatchers("/api/admin/**").hasRole("ADMIN");

        httpSecurity.csrf().disable()
            .exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint)
            .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);

        httpSecurity.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
    }
}
```

### React Frontend:

**1. Install Dependencies:**

```bash
npx create-react-app jwt-auth-demo
cd jwt-auth-demo
npm install axios react-router-dom
```

**2. Login Component:**

```jsx
// Login.js
import React, { useState } from 'react';
import axios from 'axios';

function Login({ setToken }) {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');

    const handleLogin = async () => {
        try {
            const response = await axios.post('/api/auth/login', { username, password });
            const token = response.data.token;
            setToken(token); // Store the token in state
        } catch (error) {
            console.error(error);
        }
    };

    return (
        <div>
            <h2>Login</h2>
            <input type="text" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} />
            <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
            <button onClick={handleLogin}>Login</button>
        </div>
    );
}

export default Login;
```

**3. Dashboard Component:**

```jsx
// Dashboard.js
import React from 'react';

function Dashboard() {
    return (
        <div>
            <h2>Dashboard</h2>
            <p>Welcome to the dashboard!</p>
        </div>
    );
}

export default Dashboard;
```

**4. App.js - Routing and Session Management:**

```jsx
import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';
import Login from './Login';
import Dashboard from './Dashboard';

function App() {
    const [token, setToken] = useState('');

    const logout = () => {
        setToken('');
    };

    return (
        <Router>
            <nav>
                <ul>
                    <li>
                        <Link to="/">Home</Link>
                    </li>
                    {token ? (
                        <li>
                            <button onClick={logout}>Logout</button>
                        </li>
                    ) : null}
                </ul>
            </nav>

            <Route path="/" exact>
                {token ? <Redirect to="/dashboard" /> : <Login setToken={setToken} />}
            </Route>
            <Route path="/dashboard">
                {token ? <Dashboard /> : <Redirect to="/" />}
            </Route>
        </Router>
    );
}

export default App;
```

This example demonstrates a basic JWT authentication and session management flow in a React frontend and Spring Boot backend. When a user logs in, a JWT token is generated on the server, sent to the client, and stored in the React state. Navigation between the login page and the dashboard is controlled based on the token's presence.

Please adapt and extend this code to meet your specific requirements and add error handling, security enhancements, and user feedback as needed.
