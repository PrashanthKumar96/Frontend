import React, { useState } from 'react';

// Sample expense data
const initialExpenses = [
  { id: 1, title: 'Expense 1', amount: 100, status: 'Pending' },
  { id: 2, title: 'Expense 2', amount: 200, status: 'Approved' },
  // Add more expenses as needed
];

function ExpenseCard({ expense, onCardClick }) {
  return (
    <div className="expense-card" onClick={() => onCardClick(expense)}>
      <h3>{expense.title}</h3>
      <p>Amount: ${expense.amount}</p>
      <p>Status: {expense.status}</p>
    </div>
  );
}

function ExpenseDetailsPage({ expense, onUpdateStatus }) {
  const [newStatus, setNewStatus] = useState(expense.status);

  const handleStatusChange = (e) => {
    setNewStatus(e.target.value);
  };

  const handleSubmit = () => {
    onUpdateStatus(expense.id, newStatus);
  };

  return (
    <div className="expense-details">
      <h2>{expense.title}</h2>
      <p>Amount: ${expense.amount}</p>
      <div>
        <label htmlFor="status">Change Status:</label>
        <select id="status" value={newStatus} onChange={handleStatusChange}>
          <option value="Pending">Pending</option>
          <option value="Approved">Approved</option>
          <option value="Denied">Denied</option>
        </select>
        <button onClick={handleSubmit}>Submit</button>
      </div>
    </div>
  );
}

function Sample() { // Changed the component name to Sample
  const [expenses, setExpenses] = useState(initialExpenses);
  const [selectedExpense, setSelectedExpense] = useState(null);

  const updateExpenseStatus = (id, newStatus) => {
    const updatedExpenses = expenses.map((expense) =>
      expense.id === id ? { ...expense, status: newStatus } : expense
    );
    setExpenses(updatedExpenses);
  };

  return (
    <div className="App">
      <h1>Expense Management</h1>
      <div className="expense-list">
        {expenses.map((expense) => (
          <ExpenseCard
            key={expense.id}
            expense={expense}
            onCardClick={(selectedExpense) => setSelectedExpense(selectedExpense)}
          />
        ))}
      </div>
      {selectedExpense && (
        <ExpenseDetailsPage
          expense={selectedExpense}
          onUpdateStatus={updateExpenseStatus}
        />
      )}
    </div>
  );
}

export default Sample; // Export the Sample component












Creating a 3D pie chart component in React can be achieved using third-party charting libraries. One popular library for creating 3D pie charts is "react-chartjs-2," which is based on Chart.js. Here's how to create a 3D pie chart component using this library:

1. **Install Dependencies**:

   First, you need to install the necessary dependencies:

   ```bash
   npm install react-chartjs-2 chart.js
   ```

2. **Create a 3D Pie Chart Component**:

   Create a new React component for your 3D pie chart. Here's a basic example:

   ```jsx
   import React from 'react';
   import { Pie } from 'react-chartjs-2';

   const PieChart3D = ({ data, options }) => {
     return (
       <div className="pie-chart">
         <Pie data={data} options={options} />
       </div>
     );
   };

   export default PieChart3D;
   ```

   In this component:
   - `Pie` is imported from 'react-chartjs-2'.
   - The `PieChart3D` component takes `data` and `options` as props, which will be used to customize the chart.

3. **Usage**:

   Now you can use the `PieChart3D` component in your application. Here's an example of how to use it:

   ```jsx
   import React from 'react';
   import PieChart3D from './PieChart3D';

   const chartData = {
     labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
     datasets: [
       {
         data: [12, 19, 3, 5, 2, 3],
         backgroundColor: [
           'red',
           'blue',
           'yellow',
           'green',
           'purple',
           'orange',
         ],
       },
     ],
   };

   const chartOptions = {
     responsive: true,
     plugins: {
       legend: {
         position: 'top',
       },
       title: {
         display: true,
         text: 'Sample 3D Pie Chart',
       },
     },
   };

   function App() {
     return (
       <div className="App">
         <PieChart3D data={chartData} options={chartOptions} />
       </div>
     );
   }

   export default App;
   ```

   In this example, we import the `PieChart3D` component and pass it data and options to customize the 3D pie chart.

4. **Styling**:

   You can add CSS styles to the `pie-chart` class to customize the appearance of the chart as needed.

5. **Further Customization**:

   Chart.js and react-chartjs-2 provide extensive options for customizing charts further. You can adjust colors, labels, tooltips, and more according to your requirements. Refer to the Chart.js documentation for more details: https://www.chartjs.org/docs/latest/.

By following these steps, you can create a 3D pie chart component in React using the react-chartjs-2 library and customize it to display your data effectively.










function Header() {
  const [activeTab, setActiveTab] = useState('Expenses');

  const handleTabClick = (tab) => {
    setActiveTab(tab);
  };

  return (
    <div>
      <button onClick={() => handleTabClick('Expenses')}>Expenses</button>
      <button onClick={() => handleTabClick('Charts')}>Charts</button>
    </div>
  );
}
function Details({ activeTab }) {
  return (
    <div>
      {activeTab === 'Expenses' ? (
        // Render the list of expense cards
        <ExpenseCardList />
      ) : (
        // Render the pie chart
        <PieChart />
      )}
    </div>
  );
}









To fetch data from a Spring Boot backend endpoint and display it in a React application using cards and a details component, you can follow these steps:

**Step 1: Create a Spring Boot Backend**

1. Create a Spring Boot application that exposes an endpoint to retrieve expense data as JSON. You can use Spring MVC to create a RESTful endpoint.

   Here's a simplified example of a Spring Boot controller:

   ```java
   @RestController
   @RequestMapping("/expenses")
   public class ExpenseController {

       @GetMapping("/list")
       public List<Expense> getAllExpenses() {
           // Replace this with your logic to fetch and return expense data from a database or other source
           List<Expense> expenses = // Fetch expenses
           return expenses;
       }
   }
   ```

   In this example, `/expenses/list` is the endpoint that returns a list of `Expense` objects as JSON.

**Step 2: Create a React Frontend**

1. Set up a React frontend project.

2. Use a library like Axios or the built-in `fetch` API to make an HTTP GET request to the Spring Boot endpoint and retrieve the JSON data.

   ```jsx
   import React, { useEffect, useState } from 'react';
   import ExpenseCard from './ExpenseCard';

   function Expenses() {
     const [expenses, setExpenses] = useState([]);

     useEffect(() => {
       // Make a GET request to the Spring Boot endpoint
       fetch('/expenses/list')
         .then((response) => response.json())
         .then((data) => setExpenses(data))
         .catch((error) => console.error('Error fetching expenses:', error));
     }, []);

     return (
       <div>
         <h2>Expense Requests</h2>
         <div className="expense-card-list">
           {expenses.map((expense) => (
             <ExpenseCard key={expense.id} expense={expense} />
           ))}
         </div>
       </div>
     );
   }

   export default Expenses;
   ```

   In this React component, we use the `fetch` API to make an HTTP GET request to `/expenses/list`, and when the data is received, it is stored in the `expenses` state variable.

3. Create an `ExpenseCard` component to display each expense as a card. The `ExpenseCard` component will receive an `expense` object as a prop and render the details.

   ```jsx
   import React from 'react';

   function ExpenseCard({ expense }) {
     return (
       <div className="expense-card">
         <h3>{expense.title}</h3>
         <p>Amount: {expense.amount}</p>
         {/* Add more details as needed */}
       </div>
     );
   }

   export default ExpenseCard;
   ```

4. Style your components and cards as needed using CSS or a CSS framework to make them visually appealing.

**Step 3: Route to Expenses Component**

If you want to navigate to the `Expenses` component when clicking on an "Expense Request" link or button, you can use React Router to set up routing in your React application.

1. Install React Router if you haven't already:

   ```bash
   npm install react-router-dom
   ```

2. Set up routing in your main `App` component. Define routes for your different components.

   ```jsx
   import React from 'react';
   import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
   import Expenses from './Expenses';

   function App() {
     return (
       <Router>
         <div className="App">
           <Switch>
             <Route path="/expenses" component={Expenses} />
             {/* Define more routes as needed */}
           </Switch>
         </div>
       </Router>
     );
   }

   export default App;
   ```

3. Add a link or button in your application that navigates to the `/expenses` route.

Now, when you click on the "Expense Request" link or button, your React application will route to the `Expenses` component, fetch and display expense data from the Spring Boot backend, and render it using the `ExpenseCard` component.







import React, { useEffect, useState } from 'react';
import Axios from 'axios'; // Import Axios

import ExpenseCard from './ExpenseCard';

function Expenses() {
  const [expenses, setExpenses] = useState([]);

  useEffect(() => {
    // Make a GET request using Axios to the Spring Boot endpoint
    Axios.get('/expenses/list')
      .then((response) => {
        // Extract the data from the response
        const data = response.data;
        setExpenses(data);
      })
      .catch((error) => {
        console.error('Error fetching expenses:', error);
      });
  }, []);

  return (
    <div>
      <h2>Expense Requests</h2>
      <div className="expense-card-list">
        {expenses.map((expense) => (
          <ExpenseCard key={expense.id} expense={expense} />
        ))}
      </div>
    </div>
  );
}

export default Expenses;
