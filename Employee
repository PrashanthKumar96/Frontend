// TabGroup.js
import React, { useState } from 'react';
import TabDetails from './TabDetails';

const TabGroup = () => {
  const [activeTab, setActiveTab] = useState('expense');

  const handleTabClick = (tab) => {
    setActiveTab(tab);
  };

  return (
    <div>
      <button onClick={() => handleTabClick('expense')}>Expense Tab</button>
      <button onClick={() => handleTabClick('analytics')}>Analytics Tab</button>

      <TabDetails activeTab={activeTab} />
    </div>
  );
};

export default TabGroup;

// TabDetails.js
import React from 'react';
import ExpenseList from './ExpenseList';
import Analytics from './Analytics';

const TabDetails = ({ activeTab }) => {
  return (
    <div>
      {activeTab === 'expense' && <ExpenseList />}
      {activeTab === 'analytics' && <Analytics />}
    </div>
  );
};

export default TabDetails;

// ExpenseList.js (Your Expense List Component)
import React from 'react';

const ExpenseList = () => {
  return <div>This is the Expense List component.</div>;
};

export default ExpenseList;

// Analytics.js (Your Analytics Component)
import React from 'react';

const Analytics = () => {
  return <div>This is the Analytics component.</div>;
};

export default Analytics;









// ExpenseList.js
import React, { useState } from 'react';

const ExpenseList = ({ onCardClick }) => {
  const expenses = [
    { id: 1, title: 'Expense 1', amount: 100 },
    { id: 2, title: 'Expense 2', amount: 200 },
    // Add more expense data as needed
  ];

  return (
    <div>
      {expenses.map((expense) => (
        <div
          key={expense.id}
          onClick={() => onCardClick(expense)}
          className="expense-card"
        >
          <h3>{expense.title}</h3>
          <p>Amount: ${expense.amount}</p>
        </div>
      ))}
    </div>
  );
};

export default ExpenseList;

// TabDetails.js
import React, { useState } from 'react';
import ExpenseDetails from './ExpenseDetails';

const TabDetails = ({ activeTab }) => {
  const [selectedExpense, setSelectedExpense] = useState(null);

  const handleCardClick = (expense) => {
    setSelectedExpense(expense);
  };

  const handleBackButtonClick = () => {
    setSelectedExpense(null);
  };

  return (
    <div>
      {activeTab === 'expense' && (
        <div>
          {selectedExpense ? (
            <ExpenseDetails
              expense={selectedExpense}
              onBackButtonClick={handleBackButtonClick}
            />
          ) : (
            <ExpenseList onCardClick={handleCardClick} />
          )}
        </div>
      )}
      {/* Render other tab content here */}
    </div>
  );
};

export default TabDetails;

// ExpenseDetails.js
import React from 'react';

const ExpenseDetails = ({ expense, onBackButtonClick }) => {
  return (
    <div>
      <h2>Expense Details</h2>
      <p>Title: {expense.title}</p>
      <p>Amount: ${expense.amount}</p>
      <button onClick={onBackButtonClick}>Back</button>
    </div>
  );
};

export default ExpenseDetails;










// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';
import Home from './Home';
import About from './About';
import Contact from './Contact';

const App = () => {
  return (
    <Router>
      <div>
        <nav>
          <ul>
            <li>
              <Link to="/">Home</Link>
            </li>
            <li>
              <Link to="/about">About</Link>
            </li>
            <li>
              <Link to="/contact">Contact</Link>
            </li>
          </ul>
        </nav>

        <Route path="/" exact component={Home} />
        <Route path="/about" component={About} />
        <Route path="/contact" component={Contact} />
      </div>
    </Router>
  );
};

export default App;









If you're using a custom `sdf-tab` component to manage tab switching instead of buttons, you can adapt the code accordingly. You'll still need to handle the tab switching logic within the `TabGroup` component and utilize React Router to manage the routes. Here's an example of how you can modify the code:

1. Set up your routing in the `App.js` file as before.

```javascript
// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';
import TabGroup from './TabGroup';

const App = () => {
  return (
    <Router>
      <div>
        <nav>
          <ul>
            <li>
              <Link to="/tab/expense">Expense Tab</Link>
            </li>
            <li>
              <Link to="/tab/analytics">Analytics Tab</Link>
            </li>
          </ul>
        </nav>

        <Switch>
          <Route path="/tab/:tabName" component={TabGroup} />
          <Route path="/" component={TabGroup} />
        </Switch>
      </div>
    </Router>
  );
};

export default App;
```

2. Modify your `TabGroup` component to use the `sdf-tab` component for tab switching:

```javascript
// TabGroup.js
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import ExpenseList from './ExpenseList';
import Analytics from './Analytics';
import TabDetails from './TabDetails';

const TabGroup = () => {
  const { tabName } = useParams(); // Get the active tab from the URL parameter
  const [activeTab, setActiveTab] = useState(tabName || 'expense');

  const handleTabChange = (tab) => {
    setActiveTab(tab);
  };

  return (
    <div>
      <sdf-tab active={activeTab === 'expense'} onClick={() => handleTabChange('expense')}>
        Expense Tab
      </sdf-tab>
      <sdf-tab active={activeTab === 'analytics'} onClick={() => handleTabChange('analytics')}>
        Analytics Tab
      </sdf-tab>

      {activeTab === 'expense' && <ExpenseList />}
      {activeTab === 'analytics' && <Analytics />}

      <TabDetails activeTab={activeTab} />
    </div>
  );
};

export default TabGroup;
```

In this modified code:

- We use the `sdf-tab` component instead of buttons for tab switching.
- The `handleTabChange` function is called when a tab is clicked to update the active tab.

The rest of the code remains the same, including the routing setup and component rendering based on the active tab. This approach allows you to use your custom `sdf-tab` component for tab navigation while still integrating it with React Router for managing routes and component rendering.







// ExpenseList.js
import React, { useState } from 'react';
import { useExpenseContext } from './ExpenseContext';

const ExpenseList = ({ expenses }) => {
  const { selectExpense } = useExpenseContext();
  const [selectedCategory, setSelectedCategory] = useState('all'); // State to store the selected category

  const handleExpenseClick = (expense) => {
    selectExpense(expense);
  };

  const handleCategoryChange = (event) => {
    setSelectedCategory(event.target.value);
  };

  // Function to filter expenses based on the selected category
  const filteredExpenses = selectedCategory === 'all' ? expenses : expenses.filter((expense) => expense.category === selectedCategory);

  return (
    <div>
      <h2>Expense List</h2>
      <div>
        <label htmlFor="category">Filter by Category:</label>
        <select id="category" onChange={handleCategoryChange} value={selectedCategory}>
          <option value="all">All Categories</option>
          <option value="food">Food</option>
          <option value="transportation">Transportation</option>
          {/* Add other category options here */}
        </select>
      </div>
      <ul>
        {filteredExpenses.map((expense) => (
          <li key={expense.id} onClick={() => handleExpenseClick(expense)}>
            {expense.name} - {expense.category}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ExpenseList;







// ExpenseList.js
import React, { useState } from 'react';
import { useExpenseContext } from './ExpenseContext';

const ExpenseList = ({ expenses }) => {
  const { selectExpense } = useExpenseContext();
  const [selectedCategory, setSelectedCategory] = useState('all'); // State to store the selected category

  const handleExpenseClick = (expense) => {
    selectExpense(expense);
  };

  const handleCategoryClick = (event) => {
    setSelectedCategory(event.target.getAttribute('category'));
  };

  // Function to filter expenses based on the selected category
  const filteredExpenses = selectedCategory === 'all' ? expenses : expenses.filter((expense) => expense.category === selectedCategory);

  return (
    <div>
      <h2>Expense List</h2>
      <sdf-menu>
        <sdf-menu-item category="all" onClick={handleCategoryClick}>
          All Categories
        </sdf-menu-item>
        <sdf-menu-item category="food" onClick={handleCategoryClick}>
          Food
        </sdf-menu-item>
        <sdf-menu-item category="transportation" onClick={handleCategoryClick}>
          Transportation
        </sdf-menu-item>
        {/* Add other category options here */}
      </sdf-menu>
      <ul>
        {filteredExpenses.map((expense) => (
          <li key={expense.id} onClick={() => handleExpenseClick(expense)}>
            {expense.name} - {expense.category}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ExpenseList;

